from unsloth import FastLanguageModel
from transformers import TextStreamer
import os

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º LoRA –∞–¥–∞–ø—Ç–µ—Ä–∞–º
LORA_MODEL_PATH = "./lora_model"

# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞ ---
max_seq_length = 2048
dtype = None      # None –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
load_in_4bit = True # 4-–±–∏—Ç–Ω–∞—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏

print("Loading base model...")
model, tokenizer = FastLanguageModel.from_pretrained(
    model_name="unsloth/gemma-3-270m-unsloth-bnb-4bit",
    max_seq_length=max_seq_length,
    dtype=dtype,
    load_in_4bit=load_in_4bit,
)

# --- 2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ LoRA –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ ---
print(f"Loading LoRA adapters from: {LORA_MODEL_PATH}")
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if not os.path.exists(LORA_MODEL_PATH):
    raise FileNotFoundError(
        f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {LORA_MODEL_PATH}. "
        f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞."
    )

model.load_adapter(LORA_MODEL_PATH)
print("LoRA adapters loaded successfully.")

# --- 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å—É ---
# –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–µ–Ω —Ç–æ–º—É, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
prompt_template = """### Instruction:
–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–æ–π. –û—Ç–≤–µ—Ç—å "1", –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∫–ª–∞–º–∞, –∏ "0", –µ—Å–ª–∏ –Ω–µ—Ç.

### Input:
{}

### Response:
{}"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∏–º–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
text_streamer = TextStreamer(tokenizer)

def run_inference(input_text):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    prompt = prompt_template.format(
        input_text,
        "", # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    )
    inputs = tokenizer([prompt], return_tensors="pt").to("cuda")

    print("---")
    _ = model.generate(**inputs, streamer=text_streamer, max_new_tokens=5) # 5 —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è "1" –∏–ª–∏ "0"
    print("\n")

# --- 4. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ ---

# –ü—Ä–∏–º–µ—Ä ‚Ññ1: –†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç
ad_text = """
–°—Ç—É–¥–∏—è –ë–∞–∂–æ–ª–∏–∫ –∏—â–µ—Ç –º–∞—Å—Ç–µ—Ä–∞ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ –º–∞–∫–∏—è–∂–∞ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –ú—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º, –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤. –ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∫—Ä–∞—Å–æ—Ç—ã, –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É.

üè°–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É –Æ–±–∏–ª–µ–π–Ω–∞—è 28/1
‚è∞–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å 9:00 –¥–æ 21:00
üì±–¢–µ–ª–µ—Ñ–æ–Ω +7(495)1015258
"""
run_inference(ad_text)

# –ü—Ä–∏–º–µ—Ä ‚Ññ2: –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
non_ad_text = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? –Ø –≤—á–µ—Ä–∞ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º, –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è. –ê —Ç—ã —á—Ç–æ –¥–µ–ª–∞–µ—à—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö?"
run_inference(non_ad_text)

# –ü—Ä–∏–º–µ—Ä ‚Ññ3: –°—Å—ã–ª–∫–∞ –±–µ–∑ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
link_text = "–ö—Å—Ç–∞—Ç–∏, –≤–æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å—Ç–∞—Ç—å—è –ø—Ä–æ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É: example.com/article"
run_inference(link_text)

example_text = """
ü§ì –ó–≤–æ–Ω–æ–∫ –¥–ª—è —É—á–∏—Ç–µ–ª—è, –∞ –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è ‚Äî –¥–ª—è –≤—Å–µ—Ö

–ù–µ–π—Ä–æ—Å–µ—Ç—å –°–±–µ—Ä–∞ –ì–∏–≥–∞–ß–∞—Ç (https://t.me/gigachat_bot?start=mk_BTW_students_seeding_bts_w_moscowach&erid=2Vtzquu1o87) —Å—Ç–∞–Ω–µ—Ç –Ω–∞–¥—ë–∂–Ω—ã–º –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–º –≤ —É—á—ë–±–µ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–∏. –û–Ω–∞ –æ–±—ä—è—Å–Ω–∏—Ç —Å–ª–æ–∂–Ω—É—é —Ç–µ–º—É –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º –∏ –¥–∞—Å—Ç —Å–æ–≤–µ—Ç—ã, –∫–∞–∫ –æ—Å–≤–æ–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–≤—ã–∫–∏.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —á—Ç–æ–±—ã –æ—Å–≤–µ–∂–∏—Ç—å —à–∫–æ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Å—Å–µ. –í –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ (https://t.me/gigachat_bot?start=mk_BTW_students_seeding_bts_w_moscowach&erid=2Vtzquu1o87) –∫–∞–∫ —Ä–∞–∑ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª–∏–∫–∞–º–∏ ‚Äî –≤—ã–±–∏—Ä–∞–π—Ç–µ ¬´–ü–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ¬ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é.
"""
run_inference(example_text)

print("---")
print("Inference examples finished.")
